// A namespace 
export namespace LinksParserConstants {
    // LINKS_FUNCS is a set of all Links built-in functions that can be used in the Links code
    // export const LINKS_FUNCS = new Set(["MouseOut", "MouseDown", "MouseUp", "concat", "concatMap", "zip", "reverse", "tl", "hd", "sum", "filter", "compose", "map", "inputFloat","addRoute", "submitButton","inputInt","$$hd","$$tl","*","*.","+","+.","-","-.","/","/.","<","<=","<>","==",">",">=","AsList","AsListT","AsListV","Concat","Cons","Distinct","Nil","Send","Sum","^","^.","^^","accept","addAttributes","addStaticRoute","appendChildren","attribute","beginningOfTime","cancel","ceiling","charAt","chr","clientTime","clientTimeMilliseconds","cloneNode","close","closeSocket","connectSocket","cos","crypt","dateDay","dateHours","dateMilliseconds","dateMinutes","dateMonth","dateSeconds","dateToInt","dateYear","debug","debugObj","domAppendChildRef","domGetAnchor","domGetAttributeFromRef","domGetChildrenFromRef","domGetNodeValueFromRef","domGetPropertyFromRef","domGetStyleAttrFromRef","domGetTagNameFromRef","domHasAttribute","domInsertBeforeRef","domRemoveAttributeFromRef","domReplaceChildren","domSetAnchor","domSetAttributeFromRef","domSetPropertyFromRef","domSetStyleAttrFromRef","drop","dump","environment","error","event","exit","exp","explode","firstChild","floatToInt","floatToString","floatToXml","floor","forever","gensym","getArgs","getAttribute","getAttributes","getCharCode","getCookie","getDatabaseConfig","getDocumentNode","getFromElement","getInputValue","getNamespace","getNodeById","getPageX","getPageY","getRadioGroupValue","getTagName","getTarget","getTargetElement","getTargetValue","getTime","getToElement","getValue","greatest","hasAttribute","haveMail","hd","here","implode","infinity","insertBefore","intToDate","intToFloat","intToString","intToXml","isElementNode","isNull","itemChildNodes","itemTextContent","javascript","jsArc","jsBeginPath","jsCanvasFont","jsCanvasHeight","jsCanvasWidth","jsClearRect","jsClosePath","jsDrawImage","jsFill","jsFillCircle","jsFillRect","jsFillText","jsGetContext2D","jsLineTo","jsLineWidth","jsLoadGlobalObject","jsMoveTo","jsRequestAnimationFrame","jsRestore","jsSave","jsSaveCanvas","jsSaveGlobalObject","jsScale","jsSetFillColor","jsSetInterval","jsSetOnEvent","jsSetOnKeyDown","jsSetOnLoad","jsSetWindowEvent","jsStroke","jsStrokeStyle","jsTranslate","least","length","lensQueryCount","lensQueryStatisticsReset","lensQueryTimeMilliseconds","link","log","log10","ltilde","makeXml","max","max_int","min","min_int","mod","neg_infinity","negate","negatef","new","newAP","newClientAP","newServerAP","nextSibling","not","now","objectType","ord","parentNode","parseDate","parseXml","print","random","readFromSocket","receive","recv","redirect","registerEventHandlers","removeNode","replaceDocument","replaceNode","request","self","send","servePages","serveWebsockets","serverTime","serverTimeMilliseconds","setCookie","show","showUTC","sin","sleep","sparql","spawn","spawnAngel","spawnAngelAt","spawnAt","spawnClient","spawnWait","spawnWait'","sqrt","stilde","strContains","strescape","stringToFloat","stringToInt","stringToXml","strlen","strsub","strunescape","swapNodes","sysexit","take","tan","textContent","there","tilde","tl","ttData","ttFrom","ttTo","unsafeAddRoute","unsafePickleCont","unsafe_cast","utcOffset","variantToXml","variantToXmlItem","verify","vtData","vtFrom","vtTo","withValidity","writeToSocket","xmlItemToVariant","xmlToVariant"]);    
    export const LINKS_FUNCS = new Set(["$$hd",
    "$$tl",
    "*",
    "*.",
    "+",
    "+.",
    "-",
    "-.",
    "/",
    "/.",
    "<",
    "<=",
    "<>",
    "==",
    ">",
    ">=",
    "AsList",
    "AsListT",
    "AsListV",
    "Concat",
    "Cons",
    "Distinct",
    "Nil",
    "Send",
    "Sum",
    "^",
    "^.",
    "^^",
    "accept",
    "addAttributes",
    "addStaticRoute",
    "appendChildren",
    "attribute",
    "beginningOfTime",
    "cancel",
    "ceiling",
    "charAt",
    "chr",
    "clientTime",
    "clientTimeMilliseconds",
    "cloneNode",
    "close",
    "closeSocket",
    "connectSocket",
    "cos",
    "crypt",
    "dateDay",
    "dateHours",
    "dateMilliseconds",
    "dateMinutes",
    "dateMonth",
    "dateSeconds",
    "dateToInt",
    "dateYear",
    "debug",
    "debugObj",
    "domAppendChildRef",
    "domGetAnchor",
    "domGetAttributeFromRef",
    "domGetChildrenFromRef",
    "domGetNodeValueFromRef",
    "domGetPropertyFromRef",
    "domGetStyleAttrFromRef",
    "domGetTagNameFromRef",
    "domHasAttribute",
    "domInsertBeforeRef",
    "domRemoveAttributeFromRef",
    "domReplaceChildren",
    "domSetAnchor",
    "domSetAttributeFromRef",
    "domSetPropertyFromRef",
    "domSetStyleAttrFromRef",
    "drop",
    "dump",
    "environment",
    "error",
    "event",
    "exit",
    "exp",
    "explode",
    "firstChild",
    "floatToInt",
    "floatToString",
    "floatToXml",
    "floor",
    "forever",
    "gensym",
    "getArgs",
    "getAttribute",
    "getAttributes",
    "getCharCode",
    "getCookie",
    "getDatabaseConfig",
    "getDocumentNode",
    "getFromElement",
    "getInputValue",
    "getNamespace",
    "getNodeById",
    "getPageX",
    "getPageY",
    "getRadioGroupValue",
    "getTagName",
    "getTarget",
    "getTargetElement",
    "getTargetValue",
    "getTime",
    "getToElement",
    "getValue",
    "greatest",
    "hasAttribute",
    "haveMail",
    "hd",
    "here",
    "implode",
    "infinity",
    "insertBefore",
    "intToDate",
    "intToFloat",
    "intToString",
    "intToXml",
    "isElementNode",
    "isNull",
    "itemChildNodes",
    "itemTextContent",
    "javascript",
    "jsArc",
    "jsBeginPath",
    "jsCanvasFont",
    "jsCanvasHeight",
    "jsCanvasWidth",
    "jsClearRect",
    "jsClosePath",
    "jsDrawImage",
    "jsFill",
    "jsFillCircle",
    "jsFillRect",
    "jsFillText",
    "jsGetContext2D",
    "jsLineTo",
    "jsLineWidth",
    "jsLoadGlobalObject",
    "jsMoveTo",
    "jsRequestAnimationFrame",
    "jsRestore",
    "jsSave",
    "jsSaveCanvas",
    "jsSaveGlobalObject",
    "jsScale",
    "jsSetFillColor",
    "jsSetInterval",
    "jsSetOnEvent",
    "jsSetOnKeyDown",
    "jsSetOnLoad",
    "jsSetWindowEvent",
    "jsStroke",
    "jsStrokeStyle",
    "jsTranslate",
    "least",
    "length",
    "lensQueryCount",
    "lensQueryStatisticsReset",
    "lensQueryTimeMilliseconds",
    "link",
    "log",
    "log10",
    "ltilde",
    "makeXml",
    "max",
    "max_int",
    "min",
    "min_int",
    "mod",
    "neg_infinity",
    "negate",
    "negatef",
    "new",
    "newAP",
    "newClientAP",
    "newServerAP",
    "nextSibling",
    "not",
    "now",
    "objectType",
    "ord",
    "parentNode",
    "parseDate",
    "parseXml",
    "print",
    "random",
    "readFromSocket",
    "receive",
    "recv",
    "redirect",
    "registerEventHandlers",
    "removeNode",
    "replaceDocument",
    "replaceNode",
    "request",
    "self",
    "send",
    "servePages",
    "serveWebsockets",
    "serverTime",
    "serverTimeMilliseconds",
    "setCookie",
    "show",
    "showUTC",
    "sin",
    "sleep",
    "sparql",
    "spawn",
    "spawnAngel",
    "spawnAngelAt",
    "spawnAt",
    "spawnClient",
    "spawnWait",
    "spawnWait'",
    "sqrt",
    "stilde",
    "strContains",
    "strescape",
    "stringToFloat",
    "stringToInt",
    "stringToXml",
    "strlen",
    "strsub",
    "strunescape",
    "swapNodes",
    "sysexit",
    "take",
    "tan",
    "textContent",
    "there",
    "tilde",
    "tl",
    "ttData",
    "ttFrom",
    "ttTo",
    "unsafeAddRoute",
    "unsafePickleCont",
    "unsafe_cast",
    "utcOffset",
    "variantToXml",
    "variantToXmlItem",
    "verify",
    "vtData",
    "vtFrom",
    "vtTo",
    "withValidity",
    "writeToSocket",
    "xmlItemToVariant",
    "xmlToVariant",
    "addRoute"

]);
    // __LINKS_FUNC_TYPES__ is a list of the types associated with each function in LINKS_FUNCS.
    // Is not meant to be used directly, but rather as a reference for LINKS_FUNC_TYPES_MAP
    // export const __LINKS_FUNC_TYPES__: string[] = ["[|MouseOut|_::Any|]", "[|MouseDown|_::Any|]", "[|MouseUp|_::Any|]", "([[a]]) ~> [a]", "((a) -b-> [c], [a]) -b-> [c]", "([a], [b]) ~> [(a, b)]", "([a]) ~> [a]", "([a]) ~> [a]", "([a]) ~> a", "([Int]) -> Int", "((a) -b-> Bool, [a]) -b-> [a]", "((a::Any) -b-> c::Any, (d::Any) -b-> a::Any) -> (d::Any) -b-> c::Any","((a) -b-> c, [a]) -b-> [c]", "fun : Formlet (Float)","(String, (String) {hear{_}}~> Page) ~> ()", "(String) ~> Formlet (Bool)", "Formlet (Int)",'([a])->a', '([a])->[a]', '(Int,Int)->Int', '(Float,Float)->Float', '(Int,Int)->Int', '(Float,Float)->Float', '(Int,Int)->Int', '(Float,Float)->Float', '(Int,Int)->Int', '(Float,Float)->Float', '(a,a)->Bool', '(a,a)->Bool', '(a,a)->Bool', '(a,a)->Bool', '(a,a)->Bool', '(a,a)->Bool', '(TableHandle(a,_,_)){}->[a]', '(TemporalTable(Transaction,a,_,_)){}->[TransactionTime(a)]', '(TemporalTable(Valid,a,_,_)){}->[ValidTime(a)]', '([a],[a])->[a]', '(a,[a])->[a]', '(TableHandle(a,_,_)){}->[a]', '[_]', '(Process({hear', '([Int])->Int', '(Int,Int)->Int', '(Float,Float)->Float', '(String,String)->String', '(AP(a', '(Xml,[(String,String)])->Xml', '(String,String,[(String,String)])~>()', '(Xml,DomNode)~>()', '(Xml,String)->[|Just', 'DateTime', '(_', '(Float)->Float', '(String,Int)~>Char', '(Int)->Char', '()~>Int', '()~>Int', '(DomNode,Bool)~>DomNode', '(End)~>()', '(Socket)~>()', '(String,Int)~>[|Just', '(Float)->Float', '(String)~>String', '(DateTime,Int)->Int', '(DateTime,Int)->Int', '(DateTime)->Int', '(DateTime)->Int', '(DateTime,Int)->Int', '(DateTime)->Int', '(DateTime)~>Int', '(DateTime,Int)->Int', '(String)~>()', '(_)~>()', '(DomNode,DomNode)~>()', '()~>String', '(DomNode,String)~>String', '(DomNode)~>[DomNode]', '(DomNode)~>String', '(DomNode,String)~>String', '(DomNode,String)~>String', '(DomNode)~>String', '(DomNode,String)~>Bool', '(DomNode,DomNode)~>()', '(DomNode,String)~>()', '(Xml,DomNode)~>()', '(String)~>()', '(DomNode,String,String)~>()', '(DomNode,String,String)~>()', '(DomNode,String,String)~>()', '(Int,[a])~>[a]', '(_)~>()', '()~>[(String,String)]', '(String)~>_', 'Event', '(_)~>_', '(Float)->Float', '(String)~>[Char]', '(DomNode)~>DomNode', '(Float)->Int', '(Float)->String', '(Float)->Xml', '(Float)->Float', 'DateTime', '()->Int', '()~>[String]', '(Xml,String)~>String', '(Xml)~>[(String,String)]', '(Event)~>Int', '(String)~>String', '()~>(args', '()~>DomNode', '(Event)~>DomNode', '(String)~>String', '(Xml)~>String', '(String)~>DomNode', '(Event)~>Int', '(Event)~>Int', '([String])~>String', '(Xml)~>String', '(Event)~>DomNode', '(Event)~>DomNode', '(Event)~>String', '(Event)~>Int', '(Event)~>DomNode', '(DomNode)~>Xml', '(DateTime,DateTime)~>DateTime', '(Xml,String)~>Bool', '(){', '([a])~>a', '()~>Location', '([Char])~>String', 'Float', '(Xml,DomNode)~>()', '(Int)~>DateTime', '(Int)->Float', '(Int)->String', '(Int)->Xml', '(DomNode)~>Bool', '(DomNode)~>Bool', '(XmlItem)->Xml', '(XmlItem)~>String', 'Bool', '(_,Float,Float,Float,Float,Float,Bool)~>()', '(_)~>()', '(_,String)~>()', '(_)~>Float', '(_)~>Float', '(_,Float,Float,Float,Float)~>()', '(_)~>()', '(_,DomNode,Float,Float)~>()', '(_)~>()', '(_,Float,Float,Float)~>()', '(_,Float,Float,Float,Float)~>()', '(_,String,Float,Float)~>()', '(DomNode)~>_', '(_,Float,Float)~>()', '(_,Float)~>()', '(String)~>_', '(_,Float,Float)~>()', '(()~a~>())~a~>()', '(_)~>()', '(_)~>()', '(DomNode,DomNode,String)~>()', '(String,_)~>()', '(_,Float,Float)~>()', '(_,String)~>()', '(()~a~>(),Int)~a~>()', '(DomNode,String,(Event)~a~>(),Bool)~a~>()', '(DomNode,(Event)~a~>())~a~>()', '((Event)~a~>())~a~>()', '(String,(Event)~a~>(),Bool)~a~>()', '(_)~>()', '(a,a)~>()', '(_,Float,Float)~>()', '(DateTime,DateTime)~>DateTime', '([_])->Int', '()~>Int', '()~>()', '()~>Int', '(a', '(Float)->Float', '(Float)->Float', '(String,Regex)~>[String]', '(String,[(String,String)],Xml)->XmlItem', '([a])~>[|Just', 'Int', '([a])~>[|Just', 'Int', '(Int,Int)->Int', 'Float', '(Int)->Int', '(Float)->Float', '()~>AP(_', '(Location)~>AP(_', '()~>AP(_', '()~>AP(_', '(DomNode)~>DomNode', '(Bool)->Bool', '()->DateTime', '(_)~>String', '(Char)->Int', '(DomNode)~>DomNode', '(String)~>DateTime', '(String)->Xml', '(String)~>()', '()->Float', '(Socket)~>[|Just', '(?(a', '(){', '(String)~>()', '([(String,(Event)~>())])~>String', '(DomNode)~>()', '(Xml)~>()', '(Xml,DomNode)~>()', '(AP(a', '(){hear{a}|_}~>Process({hear{a}})', '(a', '()~>()', '()~>()', '()~>Int', '()~>Int', '(String,String)~>()', '(_)~>String', '(DateTime)~>String', '(Float)->Float', '(Int)~>()', '(String,String,String)~>[[(String,String)]]', '(()~a~@_)~>Process({|a})', '(()~a~@_)~>Process({|a})', '(Location,()~a~@_)~>Process({|a})', '(Location,()~a~@_)~>Process({|a})', '(()~a~@_)~>Process({|a})', '(()~>b)~>b', '()~>_', '(Float)->Float', '(String,Regex)~>String', '(String,Char)~>Bool', '(String)~>String', '(String)->Float', '(String)->Int', '(String)->Xml', '(String)~>Int', '(String,Int,Int)~>String', '(String)~>String', '(DomNode,DomNode)~>()', '(Int)~>_', '(Int,[a])~>[a]', '(Float)->Float', '(DomNode)~>String', '()~>Location', '(String,Regex)->Bool', '([a])~>[a]', '(TransactionTime((|a)))->(|a)', '(TransactionTime(_))->DateTime', '(TransactionTime(_))->DateTime', '(String,(String,Location){hear{_}}~>b,(String,String,Location){hear{_}}~>b)~>()', '(()->_)~>String', '(_)~>_', '()~>Int', '(mua.[[|Attr', '(mua.[|Attr', '(String,String)~>Bool', '(ValidTime((|a)))->(|a)', '(ValidTime(_))->DateTime', '(ValidTime(_))->DateTime', '((|a),DateTime,DateTime)->ValidTime((|a))', '(String,Socket)~>()', '(XmlItem)~>mub.[|Attr', '(Xml)~>mub.[[|Attr'];
    export const __LINKS_FUNC_TYPES__: string[] = [
        "([a]) -> a",
        "([a]) -> [a]",
        "(Int, Int) -> Int",
        "(Float, Float) -> Float",
        "(Int, Int) -> Int",
        "(Float, Float) -> Float",
        "(Int, Int) -> Int",
        "(Float, Float) -> Float",
        "(Int, Int) -> Int",
        "(Float, Float) -> Float",
        "(a, a) -> Bool",
        "(a, a) -> Bool",
        "(a, a) -> Bool",
        "(a, a) -> Bool",
        "(a, a) -> Bool",
        "(a, a) -> Bool",
        "(TableHandle (a,_,_)) {}-> [a]",
        "(TemporalTable(Transaction,a,_,_)) {}-> [TransactionTime (a)]",
        "(TemporalTable(Valid,a,_,_)) {}-> [ValidTime (a)]",
        "([a], [a]) -> [a]",
        "(a, [a]) -> [a]",
        "(TableHandle (a,_,_)) {}-> [a]",
        "[_]",
        "(Process ({hear:a::Any|_::Any}), a::Any) ~> ()",
        "([Int]) -> Int",
        "(Int, Int) -> Int",
        "(Float, Float) -> Float",
        "(String, String) -> String",
        "(AP (a::Session)) ~> a::Session",
        "(Xml, [(String, String)]) -> Xml",
        "(String, String, [(String, String)]) ~> ()",
        "(Xml, DomNode) ~> ()",
        "(Xml, String) -> [|Just:String|Nothing|]",
        "DateTime",
        "(_::Session) ~> ()",
        "(Float) -> Float",
        "(String, Int) ~> Char",
        "(Int) -> Char",
        "() ~> Int",
        "() ~> Int",
        "(DomNode, Bool) ~> DomNode",
        "(End) ~> ()",
        "(Socket) ~> ()",
        "(String, Int) ~> [|Just:Socket|Nothing|]",
        "(Float) -> Float",
        "(String) ~> String",
        "(DateTime, Int) -> Int",
        "(DateTime, Int) -> Int",
        "(DateTime) -> Int",
        "(DateTime) -> Int",
        "(DateTime, Int) -> Int",
        "(DateTime) -> Int",
        "(DateTime) ~> Int",
        "(DateTime, Int) -> Int",
        "(String) ~> ()",
        "(_) ~> ()",
        "(DomNode, DomNode) ~> ()",
        "() ~> String",
        "(DomNode, String) ~> String",
        "(DomNode) ~> [DomNode]",
        "(DomNode) ~> String",
        "(DomNode, String) ~> String",
        "(DomNode, String) ~> String",
        "(DomNode) ~> String",
        "(DomNode, String) ~> Bool",
        "(DomNode, DomNode) ~> ()",
        "(DomNode, String) ~> ()",
        "(Xml, DomNode) ~> ()",
        "(String) ~> ()",
        "(DomNode, String, String) ~> ()",
        "(DomNode, String, String) ~> ()",
        "(DomNode, String, String) ~> ()",
        "(Int, [a]) ~> [a]",
        "(_) ~> ()",
        "() ~> [(String, String)]",
        "(String) ~> _",
        "Event",
        "(_) ~> _",
        "(Float) -> Float",
        "(String) ~> [Char]",
        "(DomNode) ~> DomNode",
        "(Float) -> Int",
        "(Float) -> String",
        "(Float) -> Xml",
        "(Float) -> Float",
        "DateTime",
        "() -> Int",
        "() ~> [String]",
        "(Xml, String) ~> String",
        "(Xml) ~> [(String, String)]",
        "(Event) ~> Int",
        "(String) ~> String",
        "() ~> (args:String,driver:String)",
        "() ~> DomNode",
        "(Event) ~> DomNode",
        "(String) ~> String",
        "(Xml) ~> String",
        "(String) ~> DomNode",
        "(Event) ~> Int",
        "(Event) ~> Int",
        "([String]) ~> String",
        "(Xml) ~> String",
        "(Event) ~> DomNode",
        "(Event) ~> DomNode",
        "(Event) ~> String",
        "(Event) ~> Int",
        "(Event) ~> DomNode",
        "(DomNode) ~> Xml",
        "(DateTime, DateTime) ~> DateTime",
        "(Xml, String) ~> Bool",
        "() {:_|_}~> Bool",
        "([a]) ~> a",
        "() ~> Location",
        "([Char]) ~> String",
        "Float",
        "(Xml, DomNode) ~> ()",
        "(Int) ~> DateTime",
        "(Int) -> Float",
        "(Int) -> String",
        "(Int) -> Xml",
        "(DomNode) ~> Bool",
        "(DomNode) ~> Bool",
        "(XmlItem) -> Xml",
        "(XmlItem) ~> String",
        "Bool",
        "(_, Float, Float, Float, Float, Float, Bool) ~> ()",
        "(_) ~> ()",
        "(_, String) ~> ()",
        "(_) ~> Float",
        "(_) ~> Float",
        "(_, Float, Float, Float, Float) ~> ()",
        "(_) ~> ()",
        "(_, DomNode, Float, Float) ~> ()",
        "(_) ~> ()",
        "(_, Float, Float, Float) ~> ()",
        "(_, Float, Float, Float, Float) ~> ()",
        "(_, String, Float, Float) ~> ()",
        "(DomNode) ~> _",
        "(_, Float, Float) ~> ()",
        "(_, Float) ~> ()",
        "(String) ~> _",
        "(_, Float, Float) ~> ()",
        "(() ~a~> ()) ~a~> ()",
        "(_) ~> ()",
        "(_) ~> ()",
        "(DomNode, DomNode, String) ~> ()",
        "(String, _) ~> ()",
        "(_, Float, Float) ~> ()",
        "(_, String) ~> ()",
        "(() ~a~> (), Int) ~a~> ()",
        "(DomNode, String, (Event) ~a~> (), Bool) ~a~> ()",
        "(DomNode, (Event) ~a~> ()) ~a~> ()",
        "((Event) ~a~> ()) ~a~> ()",
        "(String, (Event) ~a~> (), Bool) ~a~> ()",
        "(_) ~> ()",
        "(a, a) ~> ()",
        "(_, Float, Float) ~> ()",
        "(DateTime, DateTime) ~> DateTime",
        "([_]) -> Int",
        "() ~> Int",
        "() ~> ()",
        "() ~> Int",
        "(a::Session, ~a::Session) ~> ()",
        "(Float) -> Float",
        "(Float) -> Float",
        "(String, Regex) ~> [String]",
        "(String, [(String, String)], Xml) -> XmlItem",
        "([a]) ~> [|Just:a|Nothing|]",
        "Int",
        "([a]) ~> [|Just:a|Nothing|]",
        "Int",
        "(Int, Int) -> Int",
        "Float",
        "(Int) -> Int",
        "(Float) -> Float",
        "() ~> AP (_::Session)",
        "(Location) ~> AP (_::Session)",
        "() ~> AP (_::Session)",
        "() ~> AP (_::Session)",
        "(DomNode) ~> DomNode",
        "(Bool) -> Bool",
        "() -> DateTime",
        "(_) ~> String",
        "(Char) -> Int",
        "(DomNode) ~> DomNode",
        "(String) ~> DateTime",
        "(String) -> Xml",
        "(String) ~> ()",
        "() -> Float",
        "(Socket) ~> [|Just:String|Nothing|]",
        "(?(a::Any).b::Session) ~> (a::Any, b::Session)",
        "() {:a|_}~> a",
        "(String) ~> ()",
        "([(String, (Event) ~> ())]) ~> String",
        "(DomNode) ~> ()",
        "(Xml) ~> ()",
        "(Xml, DomNode) ~> ()",
        "(AP (a::Session)) ~> ~a::Session",
        "() {hear{a}|_}~> Process ({hear{a}})",
        "(a::Any, !(a::Any).b::Session) ~> b::Session",
        "() ~> ()",
        "() ~> ()",
        "() ~> Int",
        "() ~> Int",
        "(String, String) ~> ()",
        "(_) ~> String",
        "(DateTime) ~> String",
        "(Float) -> Float",
        "(Int) ~> ()",
        "(String, String, String) ~> [[(String, String)]]",
        "(() ~a~@ _) ~> Process ({ |a})",
        "(() ~a~@ _) ~> Process ({ |a})",
        "(Location, () ~a~@ _) ~> Process ({ |a})",
        "(Location, () ~a~@ _) ~> Process ({ |a})",
        "(() ~a~@ _) ~> Process ({ |a})",
        "(() ~> b) ~> b",
        "() ~> _",
        "(Float) -> Float",
        "(String, Regex) ~> String",
        "(String, Char) ~> Bool",
        "(String) ~> String",
        "(String) -> Float",
        "(String) -> Int",
        "(String) -> Xml",
        "(String) ~> Int",
        "(String, Int, Int) ~> String",
        "(String) ~> String",
        "(DomNode, DomNode) ~> ()",
        "(Int) ~> _",
        "(Int, [a]) ~> [a]",
        "(Float) -> Float",
        "(DomNode) ~> String",
        "() ~> Location",
        "(String, Regex) -> Bool",
        "([a]) ~> [a]",
        "(TransactionTime ((|a))) -> (|a)",
        "(TransactionTime (_)) -> DateTime",
        "(TransactionTime (_)) -> DateTime",
        "(String, (String, Location) {hear{_}}~> b, (String, String, Location) {hear{_}}~> b) ~> ()",
        "(() -> _) ~> String",
        "(_) ~> _",
        "() ~> Int",
        "(mu a.[[|Attr:(String, String)|Node:(String, a)|NsAttr:(String, String, String)|NsNode:(String, String, a)|Text:String|]]) ~> Xml",
        "(mu a.[|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]) ~> XmlItem",
        "(String, String) ~> Bool",
        "(ValidTime ((|a))) -> (|a)",
        "(ValidTime (_)) -> DateTime",
        "(ValidTime (_)) -> DateTime",
        "((|a), DateTime, DateTime) -> ValidTime ((|a))",
        "(String, Socket) ~> ()",
        "(XmlItem) ~> mu b.[|Attr:(String, String)|Node:(String, [b])|NsAttr:(String, String, String)|NsNode:(String, String, [b])|Text:String|]",
        "(Xml) ~> mu b.[[|Attr:(String, String)|Node:(String, b)|NsAttr:(String, String, String)|NsNode:(String, String, b)|Text:String|]]",
        "(String, (String) {hear{_}}~> Page) ~> ()"
    ];
    
    
    // LINKS_FUNC_TYPES_MAP is a map of LINKS_FUNCS to their respective types.
    // Eventually to be used to gain hover information about types as well as validate function calls
    export const LINKS_VARS = new Set(["event"]);
    export const LINKS_FUNC_TYPES_MAP: Map<string, string> = new Map(Array.from(LINKS_FUNCS.keys()).map((func, idx) => [func, __LINKS_FUNC_TYPES__[idx]]));
    export const OPERATOR_FLOAT_NAME_TO_SYMBOL: Map<string, string> = new Map([
        ["Section: Operators.Section.FloatMinus", "-."]
    ]); 

}